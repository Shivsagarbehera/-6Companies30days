class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();

         helper(candidates,0,target,ans, ds);
        return ans;
    }
    public void helper(int a[],int i, int T, List<List<Integer>> ans, List<Integer> ds){
    
             if(i == a.length){
                if(T == 0){
                    ans.add(new ArrayList<>(ds));
                }
                return;
            }
       helper(a,i + 1, T, ans, ds);
         if(a[i] <= T){
            ds.add(a[i]);
            helper(a, i, T - a[i], ans,ds);
            ds.remove(ds.size() -1);
        }
      
      
    }
}
